/**
 * ===============================
 * CONSTRUCT YOUR MODEL HERE
 * ===============================
 */
// Create a sequential neural network model. tf.sequential provides an API for
// creating "stacked" models where the output from one layer is used as the
// input to the next layer.
const model = tf.sequential();

// First flatten the image
// First layer must have an input shape defined.
model.add(tf.layers.flatten({
  inputShape: image_shape
}))

// Add a fully conected (dense) layer 
model.add(tf.layers.dense({
  units: 50, 
  kernelInitializer: 'varianceScaling'
}));

// Add a ReLU layer
model.add(tf.layers.dense({
  units: 10,
  activation: 'relu', 
  kernelInitializer: 'varianceScaling'
}));

// Add a fully conected (dense) layer 
model.add(tf.layers.dense({
  units: 15, 
  kernelInitializer: 'varianceScaling'
}));

// Add a ReLU layer
model.add(tf.layers.dense({
  units: 10,
  activation: 'relu', 
  kernelInitializer: 'varianceScaling'
}));

// Add a fully conected (dense) layer 
model.add(tf.layers.dense({
  units: 10, 
  kernelInitializer: 'varianceScaling'
}));

model.add(tf.layers.softmax());

model.compile({
  optimizer: 'sgd', 
  loss: 'categoricalCrossentropy',
  metrics: ['accuracy']
});